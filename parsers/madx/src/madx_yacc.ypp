/*******************************************************************************
********************************************************************************
********************************************************************************
******
******  File:      mad_yacc.ypp 
******                                                                
******  Copyright (c) Fermi Research Alliance LLC 
******                All Rights Reserved
******
******  Usage, modification, and redistribution are subject to terms          
******  of the License supplied with this software.
******  
******  Software and documentation created under 
******  U.S. Department of Energy Contract No. DE-AC02-07CH11359 
******  The U.S. Government retains a world-wide non-exclusive, 
******  royalty-free license to publish or reproduce documentation 
******  and software for U.S. Government purposes. This software 
******  is protected under the U.S. and Foreign Copyright Laws. 
******
******                                                                
******  Author:    Jean-Francois Ostiguy                                     
******             ostiguy@fnal.gov                         
****** 
**********************************************************************************
**********************************************************************************
*********************************************************************************/
/*----------------------------------------------*/
/* A yacc (bison) parser for MADX input files  */
/*----------------------------------------------*/

/*-----------------------------------------------------*/
/* A yacc (bison) parser grammar for xsif input files  */
/*-----------------------------------------------------*/

  /**** this should be defined only for debugging ***/

  /* %debug         */ 
  /* %error-verbose */ 

  /**** ----------------------------------------- ***/  

%skeleton "lalr1.cc"
%require "2.3"    
%define   "parser_class_name" "MadxParser"
%output="MadxParser_ypp.cc"
%lex-param   {void* yyscanner} 
%parse-param {void* yyscanner}
%name-prefix="madx_yy"                            /**** note: this affects the namespace yy ***/  
%glr-parser
%expect-rr 65
%token-table
%defines
%{

#include <cstdlib>
#include <sstream>
#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <boost/algorithm/string.hpp>
#include <boost/algorithm/string_regex.hpp>
#include <beamline/beamline.h>
#include <basic_toolkit/iosetup.h>

  class MadxParserDriver;
  class Attribute;
  class ExpNode;
  class Macro;
  using FNAL::pcerr; 
  using boost::iequals; 
%}

%union
{
  int                                ival;
  double                             dval;
  std::string*                       sval;    /* string could/should be allocated from a pool to avoid leaks */ 
  Attribute*                         pattr;
  ExpNode*                           pexp; 
};

%{
#include "MadxParserDriver.h"
%}


%parse-param {MadxParserDriver& driver}
%lex-param   {MadxParserDriver& driver}
%locations

%initial-action 
{
   // Initialize the initial location.
   @$.begin.filename = @$.end.filename = &driver.file_;
}

%{ 
/****  RESERVED KEYWORDS ****/
%}

%token    CONST
%token    COLUMN
%token    ROW
%token    VECTOR
%token    TABLE
%token    BOOL
%token    REAL
%token    STRING
%token    INTEGER
%token    TRUE
%token    FALSE

%{ 
/****  OPERATORS ****/
%}

%token    BOOL_EQUALS
%token    BOOL_NOT_EQUAL
%token    ARROW
%token    GT_OR_EQ
%token    LT_OR_EQ
%token    NEG
%token    ASSIGN
%token    AND 
%token    OR 
%token    UMINUS 

%{ 
/****  LITERALS ****/
%}

%token    REAL_LITERAL
%token    INTEGER_LITERAL
%token    STRING_LITERAL

%{ 
/****  MATH FUNCTIONS ****/
%}

%token    RANF
%token    GAUSS
%token    USER0
%token    SI
%token    SC
%token    SO
%token    ABS
%token    TRUNC
%token    ROUND
%token    FLOOR
%token    CEIL
%token    SIGN
%token    SQRT
%token    LOG
%token    EXP
%token    SIN
%token    COS
%token    TAN
%token    ASIN
%token    ACOS
%token    ATAN
%token    TGAUSS
%token    USER1
%token    ATAN2
%token    MAX
%token    MIN
%token    MOD
%token    POW
%token    USER2

%token    VMIN
%token    VMAX
%token    VRMS
%token    VABSMAX


%token    IDENTIFIER
%token    REGEX

%left '+' '-'
%left '*' '/' 
%left '^' 
%nonassoc USIGN    /* negation, unary minus */

%start program;

%% 

program: /* empty */
         |
         program statement
         ;

statement: real_definition ';'                           
           |
           string_definition ';'                        
           |
           logical_definition ';'  
           | 
           array_definition ';'  
           |
           command ';'
           ;
command:  keyword   keyword  attribute_list                 {  driver.command1(  *($<sval>1), *($<sval>2) );  
                                                              delete ($<sval>1); delete($<sval>2); 
                                                              driver.attributes_.clear();
                                                           } 
  	  | 	
          keyword   label ':' keyword attribute_list       {  driver.command2( *($<sval>1), *($<sval>2), *($<sval>4)); 
                                                              delete ($<sval>1); delete($<sval>2);  delete($<sval>4);
                                                              driver.attributes_.clear();
                                                           }
          |
          label ':' keyword attribute_list                 {  driver.command3(  *$<sval>1,  *$<sval>3); 
                                                              delete ($<sval>1); delete($<sval>3);
                                                              driver.attributes_.clear();
                                                           }
          |
          keyword   attribute_list                         {  driver.command4(  *$<sval>1 ); 
                                                              delete ($<sval>1);
                                                              driver.attributes_.clear();
                                                           } 
          ;

label  : IDENTIFIER    {  $<sval>$ = $<sval>1; };
keyword: IDENTIFIER    {  $<sval>$ = $<sval>1; };

                  /*-----------------*/
                  /*Real Expressions:*/
                  /*-----------------*/

attribute_list: /* empty */
  	       |
               attribute_list ',' attribute             
               ;

attribute: attribute_name  /* only for logical attribute*/ 
  	   | 	
           attribute_name  '='     attribute_value      { ($<pattr>3)->name =  $<sval>1;
                                                          driver.attributes_.push_back( $<pattr>3 );
                                                        }
  	   | 	
           attribute_name  ASSIGN  attribute_value      { ($<pattr>3)->name =  $<sval>1;
                                                          driver.attributes_.push_back( $<pattr>3 );
                                                        }
           ;

attribute_name: IDENTIFIER { $<sval>$ =  $<sval>1; }

attribute_value: string_expression       
  	         | 	 
                 logical_expression
  	         | 	
                 real_expression         {  $<pattr>$ = new Attribute();  ($<pattr>$)->type  = Attribute::real_expression;
                                                                          ($<pattr>$)->value.exp = $<pexp>1; 
                                         }
  	         | 	
                 array_expression
  	         | 	
                 constraint              {  $<pattr>$ = new Attribute();  ($<pattr>$)->type  = Attribute::constraint;
                                                                          ($<pattr>$)->value.str = $<sval>1;  
                                         } 
  	         | 	
                 variable_reference      {  $<pattr>$ = new Attribute();  ($<pattr>$)->type  = Attribute::variable_reference;
                                         }
  	         |
                 place                   {  $<pattr>$ = new Attribute();  ($<pattr>$)->type  = Attribute::place; 
                                         }
  	         | 	
                 range                   {  $<pattr>$ = new Attribute();  ($<pattr>$)->type  = Attribute::range; 
                                         }
  	         | 	
                 regular_expression      {  $<pattr>$ = new Attribute();  ($<pattr>$)->type  = Attribute::regular_expression; 
                                         }
                 ;
       /*
                 token_list
  	         | 	
                 token_list_array
  	         | 	
       */

real_expression: real_term                       { $<pexp>$ = $<pexp>1;  }
  	         | 
                 '+' real_term  %prec USIGN      { $<pexp>$  = $<pexp>2; }
  	         | 	
                 '-' real_term  %prec USIGN      { $<pexp>$  = new UnaryOpNode( token::UMINUS,  *($<pexp>2) );
                                                   delete ($<pexp>2);
                                                 }            
  	         | 	
                 real_expression '+' real_term    { $<pexp>$  = new BinOpNode( '+', *($<pexp>1), *($<pexp>3) );
                                                    delete ($<pexp>1); delete ($<pexp>3);
                                                  }
  	         | 	
                 real_expression '-' real_term    { $<pexp>$  = new BinOpNode( '-', *($<pexp>1), *($<pexp>3) );
                                                    delete ($<pexp>1); delete ($<pexp>3);
                                                  }
                 ;

real_term: 	 real_factor                      {  $<pexp>$ = $<pexp>1; }
  	         | 	
                 real_term '*' real_factor        {  $<pexp>$  = new BinOpNode( '*', *($<pexp>1), *($<pexp>3) );
                                                      delete ($<pexp>1); delete ($<pexp>3);
                                                  }
  	         | 	
                 real_term '/' real_factor        { $<pexp>$  = new BinOpNode( '/', *($<pexp>1), *($<pexp>3) );
                                                    delete ($<pexp>1); delete ($<pexp>3);
                                                  }
                 ;

real_factor: 	 real_primary                     { $<pexp>$ = $<pexp>1; }
  	         | 
                 real_factor '^' real_primary     { std::cout << "real_factor '^' real_primary " << std::endl;  }
                 ;

real_primary: 	 INTEGER_LITERAL          {  $<pexp>$ = new LiteralNode( double($<ival>1) );  }
                 |
                 REAL_LITERAL             {  $<pexp>$ = new LiteralNode( ($<dval>1) );  } 
  	         | 	
                 real_name                {  $<pexp>$ = new VariableNode( *($<sval>1) ); }
  	         | 	
                 symbolic_constant        {  $<pexp>$ = new VariableNode( *($<sval>1) ); } // Constant node ... FIXME !
  	         | 	
                 '#'                      {  std::cout << "#" << std::endl;   }
                 |
  	         array_name '[' INTEGER_LITERAL ']'    { std::cout << "array_name '[' INTEGER_LITERAL ']' " << std::endl; }
  	         | 	
                 object_name ARROW real_attribute      {std::cout <<  "object_name ARROW real_attribute" << std::endl;}
  	         | 	
                 object_name ARROW array_attribute '[' INTEGER_LITERAL ']' {  std::cout << "object_name ARROW array_attribute" << std::endl; }
  	         | 	
                 table_reference                       {  std::cout << "table_reference" << std::endl; }
  	         | 	
                 real_function '(' ')'                 {  std::cout  << "real_function"  << std::endl; }
  	         | 	
                 real_function '(' real_expression ')' {  $<pexp>$  = new UnaryOpNode( $<ival>1, *($<pexp>3) ); 
                                                          delete ($<pexp>3);
                                                       }
                 | 	
                 real_function '(' real_expression ',' real_expression ')' 
                                                       {  $<pexp>$  =  new BinOpNode( $<ival>1, *($<pexp>3), *($<pexp>5) );
                                                          delete ($<pexp>3); delete ( $<pexp>5 );
                                                       }
  	         | 	
                 function_of_array '(' array_expression ')' 
  	         | 	
                 '(' real_expression ')'               { $<pexp>$ =  ($<pexp>2)->clone(); delete ($<pexp>2); }
                 ;

real_function: 	RANF      { $<ival>$ =  token::RANF;   }
  	        | 	
                GAUSS     { $<ival>$ =  token::GAUSS;  }
  	        | 	
                USER0     { $<ival>$ =  token::USER0;  }
  	        | 	
                SI        { $<ival>$ =  token::SI;     }
  	        | 	
                SC        { $<ival>$ =  token::SC;     }
  	        |
                SO        { $<ival>$ =  token::SO;     }
  	        | 	
                TRUNC     { $<ival>$ =  token::TRUNC;  }
  	        | 	
                ROUND     { $<ival>$ =  token::ROUND;  }
  	        |
                FLOOR     { $<ival>$ =  token::FLOOR;  }
  	        |
                CEIL      { $<ival>$ =  token::CEIL;   }
                |
                SIGN      { $<ival>$ =  token::SIGN;   }
  	        | 	
                SQRT      { $<ival>$ =  token::SQRT;   }
  	        | 	
                LOG       { $<ival>$ =  token::LOG;    }
  	        | 	
                EXP       { $<ival>$ =  token::EXP;    }
  	        | 	
                SIN       { $<ival>$ =  token::SIN;    }
  	        | 	
                COS       { $<ival>$ =  token::COS;    }
  	        | 	
                ABS       { $<ival>$ =  token::ABS;    }
  	        | 	
                TAN       { $<ival>$ =  token::TAN;    }
  	        | 	
                ASIN      { $<ival>$ =  token::ASIN;   }
  	        | 	
                ACOS      { $<ival>$ =  token::ACOS;   }
  	        | 	
                ATAN      { $<ival>$ =  token::ATAN;   }
  	        | 	
                TGAUSS    { $<ival>$ =  token::TGAUSS; }
  	        | 	
                USER1     { $<ival>$ =  token::USER1;  }
                |
                ATAN2     { $<ival>$ =  token::ATAN2;  }
  	        | 	
                MAX       { $<ival>$ =  token::MAX;    }
  	        | 	
                MIN       { $<ival>$ =  token::MIN;    }
  	        | 	
                MOD       { $<ival>$ =  token::MOD;    }
  	        | 	
                POW       { $<ival>$ =  token::POW;    }
  	        | 	
                USER2     { $<ival>$ =  token::USER2;  }
                ;

function_of_array: VMIN
  	           | 	
                   VMAX
  	           | 	
                   VRMS
  	           | 	
                   VABSMAX
                   ;

            /* ----------------------------- */
            /* Real variables and constants: */
            /* ----------------------------- */

real_prefix: REAL             { $<ival>$ = 0; }
  	     | 	
             REAL CONST       { $<ival>$ = 1; }
  	     | 	
             CONST            { $<ival>$ = 1; }
             ;

real_definition: real_name '=' real_expression                   { LiteralNode* pval =  new LiteralNode( ($<pexp>3)->evaluate() );
                                                                   ExpNode::setVariable( *($<sval>1), *pval );  
                                                                   delete ($<pexp>3); delete $<sval>1; delete pval;
                                                                 } 
                 |
                 real_name ASSIGN real_expression                { ExpNode::setVariable(  *($<sval>1),   *($<pexp>3));  
                                                                   delete ($<pexp>3); delete $<sval>1 
                                                                 } 
                 |
                 real_prefix real_name  '=' real_expression      { LiteralNode* pval =  new LiteralNode( ($<pexp>4)->evaluate() );
                                                                   if ($<ival>1 )  { 
                                                                       ExpNode::setConstant(  *($<sval>2), *pval );  
  	           	                                           }
                                                                   else { 
                                                                       ExpNode::setVariable(  *($<sval>2), *pval );
                                                                   }
                                                                  delete ($<pexp>4); delete pval; delete $<sval>2; 
                                                                 }
                 |
                 real_prefix real_name ASSIGN real_expression    { if ($<ival>1 )  { 
                                                                       ExpNode::setConstant(  *($<sval>2), *($<pexp>4) );  
  	           	                                           }
                                                                   else { 
                                                                       ExpNode::setVariable(  *($<sval>2), *($<pexp>4) );
                                                                   }
                                                                   delete ($<sval>2);
                                                                   delete ($<pexp>4);
                                                                 }

                 ;

symbolic_constant: IDENTIFIER       {  $<sval>$ = $<sval>1; };
       	
real_name:         IDENTIFIER       {  $<sval>$ = $<sval>1; };

object_name: 	   IDENTIFIER       {  $<sval>$ = $<sval>1; };

table_name: 	   IDENTIFIER       {  $<sval>$ = $<sval>1; };

column_name: 	   IDENTIFIER       {  $<sval>$ = $<sval>1; };

table_reference:   table_name '@' place ARROW column_name;


      /*---------------------*/
      /*Logical expressions: */
      /*---------------------*/


logical_expression: and_expression
  	            | 	
                    logical_expression OR and_expression
                    ;

and_expression :    relation
  	            | 	
                    and_expression AND relation
                    ;

relation: logical_name
  	  | 	
          TRUE
  	  | 	
          FALSE
  	  | 	
          real_expression relation_operator real_expression
          ;

logical_name: 	IDENTIFIER;

relation_operator:  BOOL_EQUALS
  	            | 	
                    BOOL_NOT_EQUAL 
                    | 	
                    '<'
  	            | 	
                    '>'
  	            | 	
                    GT_OR_EQ
  	            | 	
                    LT_OR_EQ
                    ;


            /* ------------------ */
            /* Logical variables: */
            /* ------------------ */


logical_prefix: BOOL
  	        | 	
                BOOL CONST
                ;

logical_definition: logical_prefix logical_name '=' logical_expression     /* expression evaluated */
  	            | 	
                    logical_prefix logical_name ASSIGN logical_expression  /* expression retained  */
                    ;

       /* -------------------  */
       /*  String expressions: */
       /* -------------------  */

string_expression: STRING_LITERAL               { $<sval>$ = $<sval>1; } // FIXME: strip quotes 
  	           | 	
                   IDENTIFIER                   { $<sval>$ = $<sval>1;  } /*  taken as a string */
  	           | 	
                   string_expression '&' STRING_LITERAL { $<sval>$ = new string( *($<sval>1) + *($<sval>3) ); 
                                                          delete $<sval>1; delete $<sval>3; 
                                                        } // FIXME SHOULD BE EXPRESSION  
                   ;

              /* ----------------- */
              /* String constants: */
              /* ----------------- */

string_prefix: STRING;
               | 
               STRING CONST;


string_name: IDENTIFIER {    /* FIXME */   } 

string_definition: string_prefix string_name '='    string_expression;  /* expression evaluated */
  	           | 
                   string_prefix string_name ASSIGN string_expression   /* expression retained  */
                   ;

              /* ----------------------- */
              /* Real array expressions: */
              /* ----------------------- */

array_expression: array_term
  	          | 	
                  '+' array_term
  	          | 	
                  '-' array_term
  	          | 	
                  array_expression '+' array_term
  	          | 	
                  array_expression '-' array_term
                  ;

array_term: array_factor
  	    | 	
            array_term '*' array_factor
  	    | 	
            array_term '/' array_factor
            ;

array_factor: 	array_primary
  	        | 	
                array_factor '^' array_primary
                ;

array_primary: 	'{' array_literal '}'
  	        | 	
                array_reference
  	        | 	
                table_generator
  	        | 	
                row_reference
  	        | 	
                column_reference
  	        | 	
                real_function '(' array_expression ')'
  	        | 	
                '(' array_expression ')'

table_generator: TABLE '(' last ',' real_expression ')'
  	  	 |
                 TABLE '(' first ':' last ',' real_expression ')'
  	         | 	
                 TABLE '(' first ':' last ':' step ',' real_expression ')'
                 ;

first: 	INTEGER_LITERAL;

last: 	INTEGER_LITERAL;

step: 	INTEGER_LITERAL;

table_row: table_name '@' place ;
      

row_reference: 	ROW '(' table_name ',' place ')' 
                |
  	        ROW '(' table_name ',' place ',' '{' column_list '}' ')'
                ;

column_reference: COLUMN '(' table_name ',' column_name ')'
  	          | 	
                  COLUMN '(' table_name ',' column_name ',' range ')'
                  ;

column_list: 	column_name
  	        | 	
                column_list ',' column_name
                ;

array_literal: 	real_expression
  	        | 	
                array_literal ',' real_expression
                ;

array_reference: array_name
  	         | 	
                 object_name ARROW array_attribute
                 ;

array_name: 	   IDENTIFIER { $<sval>$ = $<sval>1; };

array_attribute:   IDENTIFIER { $<sval>$ = $<sval>1; };

integer_attribute: IDENTIFIER { $<sval>$ = $<sval>1; };

real_attribute:    IDENTIFIER { $<sval>$ = $<sval>1; };

               /* ----------------------- */
               /* Real array definitions: */
               /* ----------------------- */


array_prefix: 	REAL VECTOR; 


array_definition: array_prefix array_name '=' array_expression
  	          | 	
                  array_prefix array_name ASSIGN array_expression
                  ;

 /*----------- */
 /*Constraints:*/
 /*----------- */

constraint: array_expression constraint_operator  array_expression;


constraint_operator: 	BOOL_EQUALS
  	                | 	
                        '<'
  	                | 	   
                        '>'
                        ;

     /* --------------------- */
     /* Variable references:  */
     /* --------------------- */


variable_reference: object_name ARROW IDENTIFIER   /* identifier = attribute_name */
                    ;


  /* -------- */
  /* Places:  */
  /* -------- */

place: 	element_name                             {  $<sval>$ = $<sval>1; }
  	| 	
        element_name '[' INTEGER_LITERAL ']'     {  std::stringstream ss; ss << $<ival>3 << std::ends;
                                                    *$<sval>1 += "[" + ss.str() + "]";  $<sval>$ = $<sval>1;
                                                 }
  	| 	
        "#S"                                     {  $<sval>$ = new std::string("#S"); }
  	| 	
        "#E"                                     {  $<sval>$ = new std::string("#E"); }
  	| 	
        '#'  INTEGER_LITERAL                     {  std::stringstream ss; ss << $<ival>2 << std::ends;
                                                    $<sval>$ = new std::string(std::string("#")+ ss.str() ) ; 
                                                 }
  	| 	
        line_name ':'':' place                   {  $<sval>$ = new std::string( *$<sval>1 + "::" + *$<sval>4); delete $<sval>1; delete $<sval>4; }
        ;

line_name:    IDENTIFIER   { $<sval>$ = $<sval>1; };
element_name: IDENTIFIER   { $<sval>$ = $<sval>1; };

         /* ------  */ 
         /* Ranges: */
         /* ------  */

range: 	place
  	| 	
        place '/' place
        ;


/* ------------ */
/* Token lists: */
/* ------------ */

             /*
token_list:    anything_except_comma;


token_list_array: token_list
  	          | 	
                  token_list_array ',' token_list
                  ;

             */

/* --------------------- */
/* Regular Expressions:  */
/* --------------------- */ 

  regular_expression:  REGEX;

%%

void madx_yy::MadxParser::error( madx_yy::MadxParser::location_type const& l, std::string const& m )
{
  driver.error(l,m);
}

 
#if  0
---------
ELEMENTS
---------

DRIFT
    Drift Spaces | Beam Line Sequences 
KICKER     Orbit Correctors | Orbit Correctors 
HKICKER    Orbit Correctors | Orbit Correctors 
HMONITOR   Beam Position Monitors 
MARKER     Markers 
VKICK
    Orbit Correctors 
VKICKER
    Orbit Correctors | Orbit Correctors 
VMONITOR
    Beam Position Monitors 
MONITOR
    Beam Position Monitors 
MULTIPOLE
    General Multipoles 
QUADRUPOLE Quadrupoles 
OCTUPOLE
    Octupoles 
RBEND
    Bending Magnets | Bending Magnets 
RCOLLIMATOR
    Collimators 
ECOLLIMATOR
    Collimators 
RFCAVITY   RF Cavities 
SEXTUPOLE  Sextupoles 
SHARED
    Element Classes | Shared Lines 
SEQUENCE
    Beam Line Sequences | Beam Line Sequences to Beam Line Sequences
SOLENOID
    Solenoids 
#endif


