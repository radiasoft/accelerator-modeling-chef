#--------------------------------------------------------------------
# configure.in for mxyzptlk
#
# Authors:  Enrico Ng (Summer Intern) 
#
#           Jean-Francois Ostiguy
#           ostiguy@fnal.gov
#
# Process this file with autoconf to produce a configure script.
#
#-------------------------------------------------------------------

AC_INIT([mxyzptlk], [1.0])
AC_CONFIG_SRCDIR([src/TJet.cc])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_AUX_DIR(config)

AM_INIT_AUTOMAKE
AM_CONFIG_HEADER([config.h])
AC_CONFIG_HEADERS

LT_INIT

if test ${CFLAGS}   ;then cflags_is_set=set;   fi 
if test ${CXXFLAGS} ;then cxxflags_is_set=set; fi 

AC_PROG_CC([gcc])
AC_PROG_CXX([g++])
AC_PROG_LIBTOOL

dnl The AC_PROG_xx macros set CFLAGS and CXXFLAGS 
dnl to a default value if they are not set. 
dnl We keep them unset ! 

if test ! ${cflags_is_set};   then CFLAGS="";   fi
if test ! ${cxxflags_is_set}; then CXXFLAGS=""; fi

AC_ARG_ENABLE(debugging,AC_HELP_STRING([--enable-debugging],[set flags for debugging ]),,)

if test  x${val_debugging} = "xyes"; then
   OPTFLAGS="-pipe -g3 -O0"
else 
   OPTFLAGS="-pipe -g -O3 -mtune=pentium4"
fi


AC_ARG_ENABLE(first-order-only, AC_HELP_STRING([--enable-first-order-only],[ specialized first order implementation ]), 
              LOCALDEFS="-DFIRST_ORDER_JETS" )

AC_ARG_ENABLE(implicit-templates, AC_HELP_STRING([--enable-implicit-templates],[ Enable implicit template instantiation for portability ]), 
	      TEMPLATEFLAGS="",
              LOCALDEFS="-DBASICTOOLKIT_EXPLICIT_TEMPLATES -DMXYZPTLK_EXPLICIT_TEMPLATES ${LOCALDEFS}"; TEMPLATEFLAGS="-fno-implicit-templates" )

#AC_HEADER_STDC
#AC_CHECK_HEADERS([fcntl.h stdlib.h])

#---------------------------------------------------------------------------------------------
# BOOST
#---------------------------------------------------------------------------------------------

BOOST_INC="/usr/include"
BOOST_LIB="/usr/lib"

AC_ARG_VAR([BOOST_INC],    [BOOST include directory])
if test ${BOOST_INC} && test -r ${BOOST_INC}; then
        AC_MSG_RESULT([Location specified: ${BOOST_INC}])
else
	AC_CHECK_HEADER(boost/shared_ptr.hpp,,[
		AC_MSG_ERROR([BOOST includes not found, please define BOOST_INC.])
	])
fi

AC_ARG_VAR([BOOST_LIB],    [BOOST library directory])
if test ${BOOST_LIB} && test -r ${BOOST_LIB}; then
        AC_MSG_RESULT([Location specified: ${BOOST_LIB}])
else
	AC_CHECK_FILE([libboost_python.so],,[
		AC_MSG_ERROR([BOOST libary not found, please define BOOST_LIB.])
	])
fi

if test ${BOOST_INC}; then BOOST_INC="-I${BOOST_INC}"; fi

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_ERROR_AT_LINE
AC_CHECK_FUNCS([pow sqrt])

AC_SUBST(BOOST_INC) 
AC_SUBST(BOOST_LIB)

AC_SUBST(LOCALDEFS)
AC_SUBST(OPTFLAGS)
AC_SUBST(TEMPLATEFLAGS)

AM_CONDITIONAL(IMPLICIT_TEMPLATES, test "x${val_implicit_templates}" = "xyes")

AC_CONFIG_FILES([src/Makefile Makefile])
AC_OUTPUT
