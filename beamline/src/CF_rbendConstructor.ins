// Insertion for CF_rbend constructors
// 
// NOTE: If this code is ever modified, you 
// must also modify CF_rbend::readFrom and
// CF_rbend::writeTo

  double field       = this->strength;
  double frontLength =  (6.0*(this->length/4.0)/15.0)/((double) n);
  double sepLength   = (16.0*(this->length/4.0)/15.0)/((double) n);

  rbend inEdge    ( frontLength,     field, _poleFaceAngle, &rbend::InEdge  );
  rbend outEdge   ( frontLength,     field, _poleFaceAngle, &rbend::OutEdge );
  rbend separator ( 2.0*frontLength, field, &rbend::NoEdge );
  rbend body      ( sepLength,       field, &rbend::NoEdge );

  thinSextupole ts( 0.0 );
  thinQuad      tq( 0.0 );

  if( n < 0 || n > 9 ) {
    cerr << "*** WARNING ***                                         \n"
            "*** WARNING *** CR_rbend constructor                    \n"
            "*** WARNING *** n = " << n << " is out of range [1-9].  \n"
            "*** WARNING *** Constructor is resetting n = 1.         \n"
            "*** WARNING ***                                         \n"
         << endl;
    n = 1;
  }

  _u = new bmlnElmnt* [ 121 ];    // Paranoia: should need only 109
  _v = _u;

  *(_v++) = new rbend          ( inEdge  );
  *(_v++) = new thinSextupole  ( ts      );
  *(_v++) = new thinQuad       ( tq      );
  *(_v++) = new rbend          ( body    );
  *(_v++) = new thinSextupole  ( ts      );
  *(_v++) = new thinQuad       ( tq      );
  *(_v++) = new rbend          ( body    );
  *(_v++) = new thinSextupole  ( ts      );
  *(_v++) = new thinQuad       ( tq      );
  *(_v++) = new rbend          ( body    );
  *(_v++) = new thinSextupole  ( ts      );
  *(_v++) = new thinQuad       ( tq      );

  for( int i = 1; i < n; i++ ) {
    *(_v++) = new rbend          ( separator );
    *(_v++) = new thinSextupole  ( ts      );
    *(_v++) = new thinQuad       ( tq      );
    *(_v++) = new rbend          ( body    );
    *(_v++) = new thinSextupole  ( ts      );
    *(_v++) = new thinQuad       ( tq      );
    *(_v++) = new rbend          ( body    );
    *(_v++) = new thinSextupole  ( ts      );
    *(_v++) = new thinQuad       ( tq      );
    *(_v++) = new rbend          ( body    );
    *(_v++) = new thinSextupole  ( ts      );
    *(_v++) = new thinQuad       ( tq      );
  }

  *(_v  ) = new rbend          ( outEdge );


  // Paranoid test.
  if( (12*n + 1) != (1 + ( ( int(_v) - int(_u) )/sizeof( bmlnElmnt* ) )) ) {
    cerr << "*** ERROR ***                                         \n"
            "*** ERROR *** CR_rbend constructor                    \n"
            "*** ERROR *** Impossible! "
         << (11*n + 2)
         << " != " 
         << (1 + ( ( int(_v) - int(_u) )/sizeof( bmlnElmnt* ) ))
         << "\n*** ERROR *** Constructor is aborting program.        \n"
            "*** ERROR ***                                         \n"
         << endl;
    exit(9);
  }

