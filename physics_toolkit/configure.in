#--------------------------------------------------------------------
# configure.in for physics_toolkit
#
# Authors:  Jean-Francois Ostiguy
#           ostiguy@fnal.gov
#
#           Enrico Ng (Summer Intern) 
#
#
# Process this file with autoconf to produce a configure script.
#
#-------------------------------------------------------------------


AC_INIT([physics_toolkit], [1.0])
AC_CONFIG_SRCDIR([src/normalForm.cc])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_AUX_DIR(config)

AM_INIT_AUTOMAKE
AM_CONFIG_HEADER([config.h])
#AC_CONFIG_HEADERS

if test ${CFLAGS}   ;then cflags_is_set=set;   fi 
if test ${CXXFLAGS} ;then cxxflags_is_set=set; fi 

AC_PROG_CC([gcc])
AC_PROG_CXX([g++])
AC_PROG_LIBTOOL

dnl The AC_PROG_xx macros set CFLAGS and CXXFLAGS 
dnl to a default value if they are not set. 
dnl We keep them unset ! 

if test ! ${cflags_is_set};   then CFLAGS="";   fi
if test ! ${cxxflags_is_set}; then CXXFLAGS=""; fi

##----------------------------------------------------------
## by default, use the explicit template instantiation model
##-----------------------------------------------------------

AC_ARG_ENABLE(implicit-templates, AC_HELP_STRING([--enable-implicit-templates],[ Enable implicit template model]), 
	      TEMPLATEFLAGS="",
              LOCALDEFS="-DMXYZPTLK_EXPLICIT_TEMPLATES -DBASICTOOLKIT_EXPLICIT_TEMPLATES -DBEAMLINE_EXPLICIT_TEMPLATES ${LOCALDEFS}"; TEMPLATEFLAGS=-fno-implicit-templates )

if test  "x${val_debug}" = "xyes"; then 
 OPTFLAGS="-pipe -g3 -O0"
else
 OPTFLAGS="-pipe -g -O3 -mtune=pentium4"
fi

#---------------------------------------------------------------------------------------------
# BOOST
#---------------------------------------------------------------------------------------------

BOOST_INC="/usr/include"
BOOST_LIB="/usr/lib"

AC_ARG_VAR([BOOST_INC],    [BOOST include directory])
if test ${BOOST_INC} && test -r ${BOOST_INC}; then
        AC_MSG_RESULT([Location specified: ${BOOST_INC}])
else
	AC_CHECK_HEADER(boost/shared_ptr.hpp,,[
		AC_MSG_ERROR([BOOST includes not found, please define BOOST_INC.])
	])
fi

AC_ARG_VAR([BOOST_LIB],    [BOOST library directory])
if test ${BOOST_LIB} && test -r ${BOOST_LIB}; then
        AC_MSG_RESULT([Location specified: ${BOOST_LIB}])
else
	AC_CHECK_FILE([libboost_python.so],,[
		AC_MSG_ERROR([BOOST libary not found, please define BOOST_LIB.])
	])
fi


#---------------------------------------------------------------------
# VSQLITEPP
#---------------------------------------------------------------------

VSQLITEPP_INC="/usr/local/vsqlite++/include"
VSQLITEPP_LIB="/usr/local/vsqlite++/lib"

AC_ARG_VAR([VSQLITEPP_INC],  [vsqlite++ include directory])
AC_ARG_VAR([VSQLITEPP_LIB],  [vsqlite++ library directory])

SQLITE3_INC="/usr/include"
SQLITE3_LIB="/usr/lib"

#---------------------------------------------------------------------
# Checks for typedefs, structures, and compiler characteristics.
# AC_C_CONST
AC_C_INLINE

# Checks for library functions.
AC_CHECK_FUNCS([pow sqrt strstr])

if test ${BOOST_INC}; then BOOST_INC="-I${BOOST_INC}"; fi

if test ${VSQLITEPP_INC}; then VSQLITEPP_INC="-I${VSQLITEPP_INC}"; fi

AC_SUBST(BOOST_INC) 
AC_SUBST(BOOST_LIB)

AC_SUBST(VSQLITEPP_INC) 
AC_SUBST(VSQLITEPP_LIB)

AC_SUBST(LOCALDEFS)
AC_SUBST(OPTFLAGS)
AC_SUBST(TEMPLATEFLAGS)

AM_CONDITIONAL(IMPLICIT_TEMPLATES, test "x${val_implicit_templates}" = "xyes")
AC_CONFIG_FILES([src/Makefile Makefile])
AC_OUTPUT
