#--------------------------------------------------------------------
# configure.in for basic_toolkit
#
# Authors: ostiguy@fnal.gov
#          Enrico Ng (Summer Intern) 
#
# Process this file with autoconf to produce a configure script.
#
#-------------------------------------------------------------------

AC_INIT([basic_toolkit], [1.0])
AC_CONFIG_SRCDIR([src/IntArray.cc])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_AUX_DIR(config)

AM_INIT_AUTOMAKE
AM_CONFIG_HEADER([config.h])
AC_CONFIG_HEADERS

LT_INIT

## -------------------------------------------------
## Compiler flags - we require g++
##
##--------------------------------------------------

if test ${CFLAGS}   ;then cflags_is_set=set;   fi 
if test ${CXXFLAGS} ;then cxxflags_is_set=set; fi 

AC_PROG_CC([gcc])
AC_PROG_CXX([g++])
AC_PROG_LIBTOOL

dnl The AC_PROG_xx macros set CFLAGS and CXXFLAGS 
dnl to a default value if they are not set. 
dnl We keep them unset ! 

if test ! ${cflags_is_set};   then CFLAGS="";   fi
if test ! ${cxxflags_is_set}; then CXXFLAGS=""; fi

## -------------------------------------------------
## options
##--------------------------------------------------

AC_ARG_ENABLE(debugging, AC_HELP_STRING([--enable-debugging],[set compilation flags for debugging ]),,)

AC_ARG_ENABLE(implicit-templates, 
              AC_HELP_STRING([--enable-implicit-templates],
                             [ Enable implicit template instantiation model]), 
              TEMPLATEFLAGS="", TEMPLATEFLAGS="-fno-implicit-templates"; LOCALDEFS="-DBASICTOOLKIT_EXPLICIT_TEMPLATES")


if test "${val_enable_debugging}" = "yes"; then 
  OPTFLAGS="-pipe -g3 -O0"  
else
  OPTFLAGS="-pipe -mtune=pentium4 -O3 -g ${OPTFLAGS}"   
fi

# Checks for libraries.
# Checks for header files.

# AC_HEADER_STDC
# AC_CHECK_HEADERS([fcntl.h stddef.h stdlib.h string.h strings.h])

#---------------------------------------------------------------------
# FFTW3
#---------------------------------------------------------------------

AC_ARG_VAR([FFTW3_INC],[FFTW3 include directory])

if test ${FFTW3_INC} && test -r ${FFTW3_INC}; then
        AC_MSG_RESULT([Location specified: ${FFTW3_INC}])
else
	AC_CHECK_HEADER(fftw3.h,,[
		AC_MSG_ERROR([FFTW3 includes not found, please define FFTW3_INC.])
	])
fi

AC_ARG_VAR([FFTW3_LIB],    [FFTW3 lib directory])

AC_LANG_PUSH(C)
if test ${FFTW3_LIB} && test -r ${FFTW3_LIB}; then
        AC_MSG_RESULT([Location specified: ${FFTW3_LIB}]) 
else
	AC_CHECK_LIB(fftw3,fftw_execute,,[ 
		AC_MSG_ERROR([FFTW3 library not found, please define FFTW3_LIB.])
	])
fi
AC_LANG_POP(C)

#---------------------------------------------------------------------
# BOOST
#---------------------------------------------------------------------
BOOST_INC="/usr/include/boost"
BOOST_LIB="/usr/lib"

AC_ARG_VAR([BOOST_INC],    [BOOST include directory])
if test ${BOOST_INC} && test -r ${BOOST_INC}; then
        AC_MSG_RESULT([Location specified: ${BOOST_INC}])
else
	AC_CHECK_HEADER(shared_ptr.hpp,,[
		AC_MSG_ERROR([BOOST includes not found, please define BOOST_INC.])
	])
fi

AC_ARG_VAR([BOOST_LIB],    [BOOST library directory])
if test ${BOOST_LIB} && test -r ${BOOST_LIB}; then
        AC_MSG_RESULT([Location specified: ${BOOST_LIB}])
else
	AC_CHECK_FILE([libboost_python.so],,[
		AC_MSG_ERROR([BOOST libary not found, please define BOOST_LIB.])
	])
fi

#---------------------------------------------------------------------
# VSQLITEPP
#---------------------------------------------------------------------

VSQLITEPP_INC="/usr/local/vsqlite++/include"
VSQLITEPP_LIB="/usr/local/vsqlite++/lib"

AC_ARG_VAR([VSQLITEPP_INC],  [vsqlite++ include directory])
AC_ARG_VAR([VSQLITEPP_LIB],  [vsqlite++ library directory])

SQLITE3_INC="/usr/include"
SQLITE3_LIB="/usr/lib"

#---------------------------------------------------------------------
# SQLITE3
#---------------------------------------------------------------------

AC_ARG_VAR([SQLITE3_INC],  [sqlite3 include directory])
AC_ARG_VAR([SQLITE3_LIB],  [sqlite3 library directory])

if test ${BOOST_INC}; then  BOOST_INC="-I"${BOOST_INC}; fi
if test ${BOOST_LIB}; then  BOOST_LIB="-L"${BOOST_LIB}; fi

if test ${FFTW3_INC}; then FFTW3_INC="-I"${FFTW3_INC};  fi
if test ${FFTW3_LIB}; then FFTW3_LIB="-L"${FFTW3_LIB};  fi

if test ${VSQLITEPP_INC}; then VSQLITEPP_INC="-I"${VSQLITEPP_INC}; fi
if test ${VSQLITEPP_LIB}; then VSQLITEPP_LIB="-L"${VSQLITEPP_LIB}; fi

if test ${SQLITE3_INC}; then SQLITE3_INC="-I"${SQLITE3_INC}; fi
if test ${SQLITE3_LIB}; then SQLITE3_LIB="-L"${SQLITE3_LIB}; fi

AC_SUBST(BOOST_INC) 
AC_SUBST(BOOST_LIB)

AC_SUBST(FFTW3_INC)
AC_SUBST(FFTW3_LIB)

AC_SUBST(VSQLITEPP_INC)
AC_SUBST(VSQLITEPP_LIB)

AC_SUBST(SQLITE3_INC)
AC_SUBST(SQLITE3_LIB)

AC_SUBST(LOCALDEFS)
AC_SUBST(OPTFLAGS)
AC_SUBST(TEMPLATEFLAGS)

AM_CONDITIONAL(IMPLICIT_TEMPLATES, test "${val_implicit_templates}" = "yes")

AC_CONFIG_FILES([src/Makefile Makefile])
AC_OUTPUT
